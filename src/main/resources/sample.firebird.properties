# General Driver and connection parameters
#
# db={ postgres | oracle | firebird | mariadb | transact-sql }
# driver=<JDBC_DRIVER_CLASS>
# application={ Generic | PostgreSQLStoredProc | OracleStoredProc }
# conn=<JDBC_URI>
# user=<USERNAME>
# password=<PASSWORD>
db=firebird
driver=org.firebirdsql.jdbc.FBDriver
application=Generic
conn=jdbc:firebirdsql://localhost:3050//var/lib/firebird/data/benchmarksql1.fdb?charSet=UTF-8
user=benchmarksql
password=PWbmsql

# Scaling and timing configuration
warehouses=50
loadWorkers=8
monkeys=2
sutThreads=16
maxDeliveryBGThreads=2
maxDeliveryBGPerWarehouse=1
rampupMins=10
rampupSUTMins=5
rampupTerminalMins=5
runMins=30
reportIntervalSecs=30
restartSUTThreadProbability=0.0
keyingTimeMultiplier=1.0
thinkTimeMultiplier=1.0
traceTerminalIO=false

# Below are the definitions for the "attempted" transaction mix.
# The TPC-C specification requires minimum percentages for all but
# the NEW_ORDER transaction. If a test run happens to have any of
# those four types fall below those minimums, the entire test is
# invalid. We don't want that to happen, so we specify values just
# a tiny bit above the required minimum.
# The newOrderWeight is calculated as 100.0 - sum(all_other_types).
paymentWeight=43.2
orderStatusWeight=4.2
deliveryWeight=4.2
stockLevelWeight=4.2

# Directory name to create for collecting detailed result data.
# Comment this out to suppress. Note that the Flask UI will define
# this by itself, so don't specify it if you run through the UI.
resultDirectory=my_result_%tY-%tm-%td_%tH%tM%tS

# The OS metric collector script included with BenchmarkSQL is a
# Python3 script that expects to be able to connect to an MQTT broker
# like Mosquitto and receive the metrics posted to it from collectd.
# Please see the documentation for details how to configure this.
#osCollectorScript=./mc_collectd_mqtt.py -h my_mqtt_broker.localdomain -t collectd/my_dbserver.localdomain/#

# The report script is what generates the detailed HTML report for
# the benchmark run. It is a Jinja2 template based reporting system
# that includes graphs of various metrics, captured during the benchmark.
reportScript=./generateReport.py -t report_simple.html
#reportScript=./generateReport.py -t report_extended.html -d vda -i eth0
